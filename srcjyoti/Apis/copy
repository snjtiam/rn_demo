import {View, Text, FlatList} from 'react-native';
import React from 'react';
import Entypo from 'react-native-vector-icons/Entypo';
import Fontisto from 'react-native-vector-icons/Fontisto';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import Ionicons from 'react-native-vector-icons/Ionicons';
import Geolocation from '@react-native-community/geolocation';
import WeatherApi_jyoti from '../../Apis/WeatherApi_jyoti';
import {format} from 'date-fns';
import AsyncStorage from '@react-native-async-storage/async-storage';
import WEATHER_APP from './WeatherApp';

const WeatherAppUi = () => {
  const [location, setLocation] = React.useState(null);
  const [currentCondition, setCurrentCondition] = React.useState(null);
  const [currentLocation, setCurrentLocation] = React.useState(null);
  const [cities, setCities] = React.useState([]);

  const getGPSLocation = async () => {
    Geolocation.getCurrentPosition(info => {
      setLocation(info);
    });
  };

  const getGPSWeather = async () => {
    try {
      const {latitude, longitude} = location.coords;
      const response = await WeatherApi_jyoti.getGPSWeather({lat: latitude, lon: longitude});
      setCurrentLocation(response);

      const weatherResponse = await WeatherApi_jyoti.getCurrentWeather(response.Key);
      setCurrentCondition(weatherResponse);

      await AsyncStorage.setItem('weatherData', JSON.stringify(weatherResponse));

    } catch (error) {
      console.log('API ERR', error);
    }
  };

  

  const temperature = currentCondition ? currentCondition[0]?.Temperature?.Metric?.Value ?? '--' : '--';
  const condition = currentCondition ? currentCondition[0]?.WeatherText ?? '--' : '--';
  const countrytitle = currentLocation ? currentLocation?.EnglishName ?? '--' : '--';
  const locationDate = currentCondition ? currentCondition[0]?.LocalObservationDateTime ?? new Date() : new Date();
  const date = format(new Date(locationDate), 'EEEE - dd MMM');
  const time = format(new Date(locationDate), 'hh : mm')


  React.useEffect(() => {
    if (location !== null) {
      getGPSWeather();
    }
  }, [location]);

  React.useEffect(() => {
     // Access storage
    // Has data --> Load from storage
    // No data --> Load from API
    const loadDataFromStorage = async () => {
      try {
        const storedData = await AsyncStorage.getItem('weatherData');
        if (storedData) {
          setCurrentCondition(storedData);
          console.log('Data loaded from AsyncStorage:', storedData);
        }
      } catch (error) {
        console.log('Error loading data from AsyncStorage:', error);
      }
    };
    loadDataFromStorage();
    getGPSWeather();
  }, []);


  // const getCities = async () => {
  //   try {
  //     const data = await WeatherApi_jyoti.TopCityList({count: 100});
  //     setCities(data.slice(0, 4));
  //   } catch (error) {
  //     console.log('============================', error);
  //   }
  // };

  // useEffect(() => {
    // getCities();                                                              //cities
  // }, []);

  return (
    <View style={{flex: 1, backgroundColor: 'lightgrey'}}>
      <View style={{flexDirection: 'row', justifyContent: 'space-between', marginVertical: 20, marginHorizontal: 30}}>
        <Entypo name="menu" size={25} color="black" style={{alignSelf: 'center'}} />
        <View>
          <Text style={{fontSize: 17, color: 'black', fontWeight: '800'}}>{countrytitle}</Text>
          <Text style={{fontSize: 13, color: 'black', fontWeight: '400', textAlign: 'center'}}>Today, {time}</Text>
        </View>
        <Entypo name="plus" size={25} color="black" style={{alignSelf: 'center'}} />
      </View>

      <View style={{flex: 1, backgroundColor: '#fff', borderTopEndRadius: 38, borderTopLeftRadius: 40, alignContent: 'center'}}>
        <View style={{flexDirection: 'row', justifyContent: 'space-between', marginHorizontal: 40, marginVertical: 20}}>
            <View style={{flexDirection: 'row'}}>
              <MaterialCommunityIcons name="globe-model" size={25} color="black" style={{marginRight: 5, marginLeft: -5}} />
              <Text style={{fontSize: 14, color: 'black', fontWeight: 'bold', textAlign: 'center'}}>{countrytitle}</Text>
            </View>
          <View style={{flexDirection: 'row'}}>
            <Ionicons name="sunny-outline" size={25} color="black" style={{marginRight: 5}} />
            <Text style={{fontSize: 15, color: 'black', fontWeight: 'bold', textAlign: 'center'}}>{condition} Day</Text>
          </View>
        </View>
        <Text style={{fontSize: 20, color: 'black', fontWeight: '500', marginHorizontal: 40, marginTop: -4}}>{date}</Text>
        <View style={{flexDirection: 'row', marginHorizontal:40}}>
          <Text style={{fontSize: 138, color: 'black', fontWeight: '700',marginTop: -12}}>{temperature + '\u00b0'}</Text>
        </View>
        <View style={{flexDirection: 'row', justifyContent:'space-between', marginHorizontal:40,marginTop: -4, marginBottom:4}}>
        <Text style={{fontSize: 16, color: 'black', fontWeight: 'bold'}}>{condition}</Text>
        <Text style={{fontSize:23, color: 'black', fontWeight: 'bold'}}>{temperature+'\u00b0'}</Text>
        </View>
        
        {/* //reusable */}
        <View style={{borderTopWidth:1, borderTopColor:'lightgrey', paddingVertical:12, paddingHorizontal:40}}>
          <View style={{flexDirection: 'row', justifyContent:'space-between'}}>
            <Text style={{fontSize: 15,}}>Canada</Text>
            <Text style={{fontSize: 15}}>10:45 PM</Text>
          </View>
          <View style={{flexDirection: 'row', justifyContent:'space-between', paddingHorizontal:3}}>
            <Text style={{ fontSize: 27, fontWeight:'bold', color:'black'}}>Ottawa</Text>
            <Text style={{ fontSize: 22, fontWeight:500, color:'black' }}>18{'\u00b0'} <Fontisto name='cloudy' size={16}/></Text>
          </View>
        </View>
        
      </View>
    </View>
  );
};

export default WeatherAppUi;









